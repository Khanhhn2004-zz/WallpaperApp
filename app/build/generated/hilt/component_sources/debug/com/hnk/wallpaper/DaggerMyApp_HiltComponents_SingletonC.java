// Generated by Dagger (https://dagger.dev).
package com.hnk.wallpaper;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.chatapp.ui.base.BaseDialogFragment;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.hnk.wallpaper.data.api.ApiKeyManager;
import com.hnk.wallpaper.data.api.PexelsApi;
import com.hnk.wallpaper.data.local.SharedPreferenceHelper;
import com.hnk.wallpaper.data.local.room.AppDatabase;
import com.hnk.wallpaper.data.local.room.CollectionDao;
import com.hnk.wallpaper.data.local.room.CreativeDao;
import com.hnk.wallpaper.data.local.room.DownloadDao;
import com.hnk.wallpaper.data.local.room.FavoriteDao;
import com.hnk.wallpaper.data.local.room.RecentDao;
import com.hnk.wallpaper.data.local.room.WallpaperDao;
import com.hnk.wallpaper.data.repository.collections.CollectionRepo;
import com.hnk.wallpaper.data.repository.creative.CreativeRepo;
import com.hnk.wallpaper.data.repository.download.DownloadRepo;
import com.hnk.wallpaper.data.repository.favorite.FavoriteRepo;
import com.hnk.wallpaper.data.repository.intro.IntroCreativeRepo;
import com.hnk.wallpaper.data.repository.intro.IntroRepo;
import com.hnk.wallpaper.data.repository.language.LanguageRepo;
import com.hnk.wallpaper.data.repository.recent.RecentRepo;
import com.hnk.wallpaper.data.repository.search.SearchRepo;
import com.hnk.wallpaper.data.repository.wallpaper.WallpaperRepo;
import com.hnk.wallpaper.di.ApiModule;
import com.hnk.wallpaper.di.ApiModule_ProvideApiKeyManagerFactory;
import com.hnk.wallpaper.di.ApiModule_ProvideOkHttpFactory;
import com.hnk.wallpaper.di.ApiModule_ProvidePixelsApiFactory;
import com.hnk.wallpaper.di.ApiModule_ProvideRetrofitFactory;
import com.hnk.wallpaper.di.AppModule;
import com.hnk.wallpaper.di.AppModule_AppDatabaseFactory;
import com.hnk.wallpaper.di.AppModule_ProvideCollectionDaoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideCollectionRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideCreativeDaoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideCreativeRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideDownloadDaoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideDownloadRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideFavoriteDaoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideFavoriteRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideIntroCreativeRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideIntroRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideLanguageRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideRecentDaoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideRecentRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideSearchRepoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideSharedPreferenceFactory;
import com.hnk.wallpaper.di.AppModule_ProvideWallpaperDaoFactory;
import com.hnk.wallpaper.di.AppModule_ProvideWallpaperRepoFactory;
import com.hnk.wallpaper.ui.base.BaseActivity;
import com.hnk.wallpaper.ui.base.BaseFragment;
import com.hnk.wallpaper.ui.detail.DetailVM;
import com.hnk.wallpaper.ui.detail.DetailVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.download.DownloadVM;
import com.hnk.wallpaper.ui.download.DownloadVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.favorite.FavouriteVM;
import com.hnk.wallpaper.ui.favorite.FavouriteVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.home.collections.CollectionsVM;
import com.hnk.wallpaper.ui.home.collections.CollectionsVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.home.collections.showmore.ShowMoreCollectionsVM;
import com.hnk.wallpaper.ui.home.collections.showmore.ShowMoreCollectionsVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.home.creative.CreativeVM;
import com.hnk.wallpaper.ui.home.creative.CreativeVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.home.featured.FeaturedVM;
import com.hnk.wallpaper.ui.home.featured.FeaturedVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.home.featured.showmore.ShowMoreVM;
import com.hnk.wallpaper.ui.home.featured.showmore.ShowMoreVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.home.search.SearchVM;
import com.hnk.wallpaper.ui.home.search.SearchVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.intro.IntroCreateWallppaperVM;
import com.hnk.wallpaper.ui.intro.IntroCreateWallppaperVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.intro.IntroVM;
import com.hnk.wallpaper.ui.intro.IntroVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.language.LanguageVM;
import com.hnk.wallpaper.ui.language.LanguageVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.main.MainVM;
import com.hnk.wallpaper.ui.main.MainVM_HiltModules_KeyModule_ProvideFactory;
import com.hnk.wallpaper.ui.recent.RecentVM;
import com.hnk.wallpaper.ui.recent.RecentVM_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.managers.SavedStateHandleHolder;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import java.util.Map;
import java.util.Set;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DaggerMyApp_HiltComponents_SingletonC {
  private DaggerMyApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApiModule apiModule;

    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public MyApp_HiltComponents.SingletonC build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(apiModule, appModule, applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private SavedStateHandleHolder savedStateHandleHolder;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ActivityRetainedCBuilder savedStateHandleHolder(
        SavedStateHandleHolder savedStateHandleHolder) {
      this.savedStateHandleHolder = Preconditions.checkNotNull(savedStateHandleHolder);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ActivityRetainedC build() {
      Preconditions.checkBuilderRequirement(savedStateHandleHolder, SavedStateHandleHolder.class);
      return new ActivityRetainedCImpl(singletonCImpl, savedStateHandleHolder);
    }
  }

  private static final class ActivityCBuilder implements MyApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements MyApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectBaseDialogFragment(BaseDialogFragment baseDialogFragment) {
    }

    @Override
    public void injectBaseFragment(BaseFragment baseFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MyApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApp_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectBaseActivity(BaseActivity baseActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(CollectionsVM_HiltModules_KeyModule_ProvideFactory.provide(), CreativeVM_HiltModules_KeyModule_ProvideFactory.provide(), DetailVM_HiltModules_KeyModule_ProvideFactory.provide(), DownloadVM_HiltModules_KeyModule_ProvideFactory.provide(), FavouriteVM_HiltModules_KeyModule_ProvideFactory.provide(), FeaturedVM_HiltModules_KeyModule_ProvideFactory.provide(), IntroCreateWallppaperVM_HiltModules_KeyModule_ProvideFactory.provide(), IntroVM_HiltModules_KeyModule_ProvideFactory.provide(), LanguageVM_HiltModules_KeyModule_ProvideFactory.provide(), MainVM_HiltModules_KeyModule_ProvideFactory.provide(), RecentVM_HiltModules_KeyModule_ProvideFactory.provide(), SearchVM_HiltModules_KeyModule_ProvideFactory.provide(), ShowMoreCollectionsVM_HiltModules_KeyModule_ProvideFactory.provide(), ShowMoreVM_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends MyApp_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<CollectionsVM> collectionsVMProvider;

    private Provider<CreativeVM> creativeVMProvider;

    private Provider<DetailVM> detailVMProvider;

    private Provider<DownloadVM> downloadVMProvider;

    private Provider<FavouriteVM> favouriteVMProvider;

    private Provider<FeaturedVM> featuredVMProvider;

    private Provider<IntroCreateWallppaperVM> introCreateWallppaperVMProvider;

    private Provider<IntroVM> introVMProvider;

    private Provider<LanguageVM> languageVMProvider;

    private Provider<MainVM> mainVMProvider;

    private Provider<RecentVM> recentVMProvider;

    private Provider<SearchVM> searchVMProvider;

    private Provider<ShowMoreCollectionsVM> showMoreCollectionsVMProvider;

    private Provider<ShowMoreVM> showMoreVMProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.collectionsVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.creativeVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.detailVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.downloadVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.favouriteVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.featuredVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.introCreateWallppaperVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.introVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.languageVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.mainVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.recentVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.searchVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
      this.showMoreCollectionsVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
      this.showMoreVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 13);
    }

    @Override
    public Map<String, javax.inject.Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, javax.inject.Provider<ViewModel>>builderWithExpectedSize(14).put("com.hnk.wallpaper.ui.home.collections.CollectionsVM", ((Provider) collectionsVMProvider)).put("com.hnk.wallpaper.ui.home.creative.CreativeVM", ((Provider) creativeVMProvider)).put("com.hnk.wallpaper.ui.detail.DetailVM", ((Provider) detailVMProvider)).put("com.hnk.wallpaper.ui.download.DownloadVM", ((Provider) downloadVMProvider)).put("com.hnk.wallpaper.ui.favorite.FavouriteVM", ((Provider) favouriteVMProvider)).put("com.hnk.wallpaper.ui.home.featured.FeaturedVM", ((Provider) featuredVMProvider)).put("com.hnk.wallpaper.ui.intro.IntroCreateWallppaperVM", ((Provider) introCreateWallppaperVMProvider)).put("com.hnk.wallpaper.ui.intro.IntroVM", ((Provider) introVMProvider)).put("com.hnk.wallpaper.ui.language.LanguageVM", ((Provider) languageVMProvider)).put("com.hnk.wallpaper.ui.main.MainVM", ((Provider) mainVMProvider)).put("com.hnk.wallpaper.ui.recent.RecentVM", ((Provider) recentVMProvider)).put("com.hnk.wallpaper.ui.home.search.SearchVM", ((Provider) searchVMProvider)).put("com.hnk.wallpaper.ui.home.collections.showmore.ShowMoreCollectionsVM", ((Provider) showMoreCollectionsVMProvider)).put("com.hnk.wallpaper.ui.home.featured.showmore.ShowMoreVM", ((Provider) showMoreVMProvider)).build();
    }

    @Override
    public Map<String, Object> getHiltViewModelAssistedMap() {
      return ImmutableMap.<String, Object>of();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.hnk.wallpaper.ui.home.collections.CollectionsVM 
          return (T) new CollectionsVM(singletonCImpl.provideCollectionRepoProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 1: // com.hnk.wallpaper.ui.home.creative.CreativeVM 
          return (T) new CreativeVM(singletonCImpl.provideCreativeRepoProvider.get());

          case 2: // com.hnk.wallpaper.ui.detail.DetailVM 
          return (T) new DetailVM(singletonCImpl.provideRecentRepoProvider.get(), singletonCImpl.provideFavoriteRepoProvider.get(), singletonCImpl.provideDownloadRepoProvider.get(), singletonCImpl.provideWallpaperRepoProvider.get());

          case 3: // com.hnk.wallpaper.ui.download.DownloadVM 
          return (T) new DownloadVM();

          case 4: // com.hnk.wallpaper.ui.favorite.FavouriteVM 
          return (T) new FavouriteVM(singletonCImpl.provideFavoriteRepoProvider.get());

          case 5: // com.hnk.wallpaper.ui.home.featured.FeaturedVM 
          return (T) new FeaturedVM(singletonCImpl.provideWallpaperRepoProvider.get());

          case 6: // com.hnk.wallpaper.ui.intro.IntroCreateWallppaperVM 
          return (T) new IntroCreateWallppaperVM(singletonCImpl.provideIntroCreativeRepoProvider.get());

          case 7: // com.hnk.wallpaper.ui.intro.IntroVM 
          return (T) new IntroVM(singletonCImpl.provideIntroRepoProvider.get());

          case 8: // com.hnk.wallpaper.ui.language.LanguageVM 
          return (T) new LanguageVM(singletonCImpl.provideLanguageRepoProvider.get());

          case 9: // com.hnk.wallpaper.ui.main.MainVM 
          return (T) new MainVM(singletonCImpl.provideWallpaperRepoProvider.get(), singletonCImpl.provideDownloadRepoProvider.get());

          case 10: // com.hnk.wallpaper.ui.recent.RecentVM 
          return (T) new RecentVM(singletonCImpl.provideRecentRepoProvider.get());

          case 11: // com.hnk.wallpaper.ui.home.search.SearchVM 
          return (T) new SearchVM(singletonCImpl.provideSearchRepoProvider.get());

          case 12: // com.hnk.wallpaper.ui.home.collections.showmore.ShowMoreCollectionsVM 
          return (T) new ShowMoreCollectionsVM(singletonCImpl.provideWallpaperRepoProvider.get(), singletonCImpl.provideDownloadRepoProvider.get());

          case 13: // com.hnk.wallpaper.ui.home.featured.showmore.ShowMoreVM 
          return (T) new ShowMoreVM(singletonCImpl.provideWallpaperRepoProvider.get(), singletonCImpl.provideSearchRepoProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl,
        SavedStateHandleHolder savedStateHandleHolderParam) {
      this.singletonCImpl = singletonCImpl;

      initialize(savedStateHandleHolderParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandleHolder savedStateHandleHolderParam) {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MyApp_HiltComponents.SingletonC {
    private final AppModule appModule;

    private final ApplicationContextModule applicationContextModule;

    private final ApiModule apiModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<SharedPreferences> provideSharedPreferenceProvider;

    private Provider<AppDatabase> appDatabaseProvider;

    private Provider<CollectionDao> provideCollectionDaoProvider;

    private Provider<ApiKeyManager> provideApiKeyManagerProvider;

    private Provider<OkHttpClient> provideOkHttpProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<PexelsApi> providePixelsApiProvider;

    private Provider<CollectionRepo> provideCollectionRepoProvider;

    private Provider<CreativeDao> provideCreativeDaoProvider;

    private Provider<CreativeRepo> provideCreativeRepoProvider;

    private Provider<RecentDao> provideRecentDaoProvider;

    private Provider<RecentRepo> provideRecentRepoProvider;

    private Provider<FavoriteDao> provideFavoriteDaoProvider;

    private Provider<FavoriteRepo> provideFavoriteRepoProvider;

    private Provider<DownloadDao> provideDownloadDaoProvider;

    private Provider<DownloadRepo> provideDownloadRepoProvider;

    private Provider<WallpaperDao> provideWallpaperDaoProvider;

    private Provider<WallpaperRepo> provideWallpaperRepoProvider;

    private Provider<IntroCreativeRepo> provideIntroCreativeRepoProvider;

    private Provider<IntroRepo> provideIntroRepoProvider;

    private Provider<LanguageRepo> provideLanguageRepoProvider;

    private Provider<SearchRepo> provideSearchRepoProvider;

    private SingletonCImpl(ApiModule apiModuleParam, AppModule appModuleParam,
        ApplicationContextModule applicationContextModuleParam) {
      this.appModule = appModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      this.apiModule = apiModuleParam;
      initialize(apiModuleParam, appModuleParam, applicationContextModuleParam);

    }

    private SharedPreferenceHelper sharedPreferenceHelper() {
      return new SharedPreferenceHelper(provideSharedPreferenceProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApiModule apiModuleParam, final AppModule appModuleParam,
        final ApplicationContextModule applicationContextModuleParam) {
      this.provideSharedPreferenceProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonCImpl, 0));
      this.appDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 3));
      this.provideCollectionDaoProvider = DoubleCheck.provider(new SwitchingProvider<CollectionDao>(singletonCImpl, 2));
      this.provideApiKeyManagerProvider = DoubleCheck.provider(new SwitchingProvider<ApiKeyManager>(singletonCImpl, 7));
      this.provideOkHttpProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 6));
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 5));
      this.providePixelsApiProvider = DoubleCheck.provider(new SwitchingProvider<PexelsApi>(singletonCImpl, 4));
      this.provideCollectionRepoProvider = DoubleCheck.provider(new SwitchingProvider<CollectionRepo>(singletonCImpl, 1));
      this.provideCreativeDaoProvider = DoubleCheck.provider(new SwitchingProvider<CreativeDao>(singletonCImpl, 9));
      this.provideCreativeRepoProvider = DoubleCheck.provider(new SwitchingProvider<CreativeRepo>(singletonCImpl, 8));
      this.provideRecentDaoProvider = DoubleCheck.provider(new SwitchingProvider<RecentDao>(singletonCImpl, 11));
      this.provideRecentRepoProvider = DoubleCheck.provider(new SwitchingProvider<RecentRepo>(singletonCImpl, 10));
      this.provideFavoriteDaoProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteDao>(singletonCImpl, 13));
      this.provideFavoriteRepoProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteRepo>(singletonCImpl, 12));
      this.provideDownloadDaoProvider = DoubleCheck.provider(new SwitchingProvider<DownloadDao>(singletonCImpl, 15));
      this.provideDownloadRepoProvider = DoubleCheck.provider(new SwitchingProvider<DownloadRepo>(singletonCImpl, 14));
      this.provideWallpaperDaoProvider = DoubleCheck.provider(new SwitchingProvider<WallpaperDao>(singletonCImpl, 17));
      this.provideWallpaperRepoProvider = DoubleCheck.provider(new SwitchingProvider<WallpaperRepo>(singletonCImpl, 16));
      this.provideIntroCreativeRepoProvider = DoubleCheck.provider(new SwitchingProvider<IntroCreativeRepo>(singletonCImpl, 18));
      this.provideIntroRepoProvider = DoubleCheck.provider(new SwitchingProvider<IntroRepo>(singletonCImpl, 19));
      this.provideLanguageRepoProvider = DoubleCheck.provider(new SwitchingProvider<LanguageRepo>(singletonCImpl, 20));
      this.provideSearchRepoProvider = DoubleCheck.provider(new SwitchingProvider<SearchRepo>(singletonCImpl, 21));
    }

    @Override
    public void injectMyApp(MyApp myApp) {
      injectMyApp2(myApp);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @CanIgnoreReturnValue
    private MyApp injectMyApp2(MyApp instance) {
      MyApp_MembersInjector.injectSharedPreferenceHelper(instance, sharedPreferenceHelper());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // android.content.SharedPreferences 
          return (T) AppModule_ProvideSharedPreferenceFactory.provideSharedPreference(singletonCImpl.appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 1: // com.hnk.wallpaper.data.repository.collections.CollectionRepo 
          return (T) AppModule_ProvideCollectionRepoFactory.provideCollectionRepo(singletonCImpl.appModule, singletonCImpl.provideCollectionDaoProvider.get(), singletonCImpl.providePixelsApiProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 2: // com.hnk.wallpaper.data.local.room.CollectionDao 
          return (T) AppModule_ProvideCollectionDaoFactory.provideCollectionDao(singletonCImpl.appModule, singletonCImpl.appDatabaseProvider.get());

          case 3: // com.hnk.wallpaper.data.local.room.AppDatabase 
          return (T) AppModule_AppDatabaseFactory.appDatabase(singletonCImpl.appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 4: // com.hnk.wallpaper.data.api.PexelsApi 
          return (T) ApiModule_ProvidePixelsApiFactory.providePixelsApi(singletonCImpl.apiModule, singletonCImpl.provideRetrofitProvider.get());

          case 5: // retrofit2.Retrofit 
          return (T) ApiModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.apiModule, singletonCImpl.provideOkHttpProvider.get());

          case 6: // okhttp3.OkHttpClient 
          return (T) ApiModule_ProvideOkHttpFactory.provideOkHttp(singletonCImpl.apiModule, singletonCImpl.provideApiKeyManagerProvider.get());

          case 7: // com.hnk.wallpaper.data.api.ApiKeyManager 
          return (T) ApiModule_ProvideApiKeyManagerFactory.provideApiKeyManager(singletonCImpl.apiModule);

          case 8: // com.hnk.wallpaper.data.repository.creative.CreativeRepo 
          return (T) AppModule_ProvideCreativeRepoFactory.provideCreativeRepo(singletonCImpl.appModule, singletonCImpl.provideCreativeDaoProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 9: // com.hnk.wallpaper.data.local.room.CreativeDao 
          return (T) AppModule_ProvideCreativeDaoFactory.provideCreativeDao(singletonCImpl.appModule, singletonCImpl.appDatabaseProvider.get());

          case 10: // com.hnk.wallpaper.data.repository.recent.RecentRepo 
          return (T) AppModule_ProvideRecentRepoFactory.provideRecentRepo(singletonCImpl.appModule, singletonCImpl.provideRecentDaoProvider.get());

          case 11: // com.hnk.wallpaper.data.local.room.RecentDao 
          return (T) AppModule_ProvideRecentDaoFactory.provideRecentDao(singletonCImpl.appModule, singletonCImpl.appDatabaseProvider.get());

          case 12: // com.hnk.wallpaper.data.repository.favorite.FavoriteRepo 
          return (T) AppModule_ProvideFavoriteRepoFactory.provideFavoriteRepo(singletonCImpl.appModule, singletonCImpl.provideFavoriteDaoProvider.get());

          case 13: // com.hnk.wallpaper.data.local.room.FavoriteDao 
          return (T) AppModule_ProvideFavoriteDaoFactory.provideFavoriteDao(singletonCImpl.appModule, singletonCImpl.appDatabaseProvider.get());

          case 14: // com.hnk.wallpaper.data.repository.download.DownloadRepo 
          return (T) AppModule_ProvideDownloadRepoFactory.provideDownloadRepo(singletonCImpl.appModule, singletonCImpl.provideDownloadDaoProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 15: // com.hnk.wallpaper.data.local.room.DownloadDao 
          return (T) AppModule_ProvideDownloadDaoFactory.provideDownloadDao(singletonCImpl.appModule, singletonCImpl.appDatabaseProvider.get());

          case 16: // com.hnk.wallpaper.data.repository.wallpaper.WallpaperRepo 
          return (T) AppModule_ProvideWallpaperRepoFactory.provideWallpaperRepo(singletonCImpl.appModule, singletonCImpl.providePixelsApiProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), singletonCImpl.provideWallpaperDaoProvider.get());

          case 17: // com.hnk.wallpaper.data.local.room.WallpaperDao 
          return (T) AppModule_ProvideWallpaperDaoFactory.provideWallpaperDao(singletonCImpl.appModule, singletonCImpl.appDatabaseProvider.get());

          case 18: // com.hnk.wallpaper.data.repository.intro.IntroCreativeRepo 
          return (T) AppModule_ProvideIntroCreativeRepoFactory.provideIntroCreativeRepo(singletonCImpl.appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 19: // com.hnk.wallpaper.data.repository.intro.IntroRepo 
          return (T) AppModule_ProvideIntroRepoFactory.provideIntroRepo(singletonCImpl.appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 20: // com.hnk.wallpaper.data.repository.language.LanguageRepo 
          return (T) AppModule_ProvideLanguageRepoFactory.provideLanguageRepo(singletonCImpl.appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 21: // com.hnk.wallpaper.data.repository.search.SearchRepo 
          return (T) AppModule_ProvideSearchRepoFactory.provideSearchRepo(singletonCImpl.appModule, singletonCImpl.providePixelsApiProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
